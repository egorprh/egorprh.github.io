# pip install fastapi uvicorn python-dotenv requests python-multipart
import os
from dotenv import load_dotenv
import requests
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI
app = FastAPI()

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://egorprh.github.io/",
        "http://127.0.0.1:5500"
    ],
    allow_credentials=True,
    allow_methods=["POST"],  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST
    allow_headers=["Content-Type", "Accept"],
)

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
class ApplicationForm(BaseModel):
    name: str
    phone: str
    telegram: str
    form_source: str = None

def send_message_to_channel(message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    
    –¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ:
        TELEGRAM_BOT_TOKEN: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞.
        TELEGRAM_CHANNEL_ID: ID –∫–∞–Ω–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ @channelname –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID).
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
    
    if not bot_token or not channel_id:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API Telegram
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'chat_id': channel_id,
        'text': message,
        'parse_mode': 'HTML'  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'MarkdownV2' –∏–ª–∏ 'HTML'
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = requests.post(url, data=params)
    
    return response

@app.post("/send-application/")
async def send_application_api(request: Request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üìå <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>\n\n"
            f"üë§ <b>–§–ò–û:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚úàÔ∏è <b>Telegram:</b> @{data.get('telegram', '').replace('@', '')}\n"
        )
        
        if 'form_source' in data:
            message += f"\nüåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {data['form_source']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = send_message_to_channel(message)
        
        if response.status_code == 200:
            return {
                "status": "success",
                "message": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!"
            }
        else:
            raise HTTPException(
                status_code=response.status_code,
                detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏"
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ FastAPI)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)